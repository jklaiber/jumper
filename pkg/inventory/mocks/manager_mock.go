// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination=mocks/manager_mock.go -package=mocks InventoryManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	access "github.com/jklaiber/jumper/pkg/access"
	inventory "github.com/jklaiber/jumper/pkg/inventory"
	gomock "go.uber.org/mock/gomock"
)

// MockInventoryManager is a mock of InventoryManager interface.
type MockInventoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryManagerMockRecorder
}

// MockInventoryManagerMockRecorder is the mock recorder for MockInventoryManager.
type MockInventoryManagerMockRecorder struct {
	mock *MockInventoryManager
}

// NewMockInventoryManager creates a new mock instance.
func NewMockInventoryManager(ctrl *gomock.Controller) *MockInventoryManager {
	mock := &MockInventoryManager{ctrl: ctrl}
	mock.recorder = &MockInventoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryManager) EXPECT() *MockInventoryManagerMockRecorder {
	return m.recorder
}

// GetAccessConfig mocks base method.
func (m *MockInventoryManager) GetAccessConfig(groupName, hostName string) (*access.AccessConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessConfig", groupName, hostName)
	ret0, _ := ret[0].(*access.AccessConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessConfig indicates an expected call of GetAccessConfig.
func (mr *MockInventoryManagerMockRecorder) GetAccessConfig(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessConfig", reflect.TypeOf((*MockInventoryManager)(nil).GetAccessConfig), groupName, hostName)
}

// GetGroupHosts mocks base method.
func (m *MockInventoryManager) GetGroupHosts(group string) []inventory.HostDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupHosts", group)
	ret0, _ := ret[0].([]inventory.HostDetail)
	return ret0
}

// GetGroupHosts indicates an expected call of GetGroupHosts.
func (mr *MockInventoryManagerMockRecorder) GetGroupHosts(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupHosts", reflect.TypeOf((*MockInventoryManager)(nil).GetGroupHosts), group)
}

// GetGroups mocks base method.
func (m *MockInventoryManager) GetGroups() []inventory.GroupDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups")
	ret0, _ := ret[0].([]inventory.GroupDetail)
	return ret0
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockInventoryManagerMockRecorder) GetGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockInventoryManager)(nil).GetGroups))
}

// GetHostAddress mocks base method.
func (m *MockInventoryManager) GetHostAddress(groupName, hostName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostAddress", groupName, hostName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostAddress indicates an expected call of GetHostAddress.
func (mr *MockInventoryManagerMockRecorder) GetHostAddress(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostAddress", reflect.TypeOf((*MockInventoryManager)(nil).GetHostAddress), groupName, hostName)
}

// GetHostPassword mocks base method.
func (m *MockInventoryManager) GetHostPassword(groupName, hostName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostPassword", groupName, hostName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostPassword indicates an expected call of GetHostPassword.
func (mr *MockInventoryManagerMockRecorder) GetHostPassword(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostPassword", reflect.TypeOf((*MockInventoryManager)(nil).GetHostPassword), groupName, hostName)
}

// GetHostPort mocks base method.
func (m *MockInventoryManager) GetHostPort(groupName, hostName string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostPort", groupName, hostName)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetHostPort indicates an expected call of GetHostPort.
func (mr *MockInventoryManagerMockRecorder) GetHostPort(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostPort", reflect.TypeOf((*MockInventoryManager)(nil).GetHostPort), groupName, hostName)
}

// GetHostSSHAgent mocks base method.
func (m *MockInventoryManager) GetHostSSHAgent(groupName, hostName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSSHAgent", groupName, hostName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHostSSHAgent indicates an expected call of GetHostSSHAgent.
func (mr *MockInventoryManagerMockRecorder) GetHostSSHAgent(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSSHAgent", reflect.TypeOf((*MockInventoryManager)(nil).GetHostSSHAgent), groupName, hostName)
}

// GetHostSSHAgentForwarding mocks base method.
func (m *MockInventoryManager) GetHostSSHAgentForwarding(groupName, hostName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSSHAgentForwarding", groupName, hostName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetHostSSHAgentForwarding indicates an expected call of GetHostSSHAgentForwarding.
func (mr *MockInventoryManagerMockRecorder) GetHostSSHAgentForwarding(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSSHAgentForwarding", reflect.TypeOf((*MockInventoryManager)(nil).GetHostSSHAgentForwarding), groupName, hostName)
}

// GetHostSSHKey mocks base method.
func (m *MockInventoryManager) GetHostSSHKey(groupName, hostName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostSSHKey", groupName, hostName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHostSSHKey indicates an expected call of GetHostSSHKey.
func (mr *MockInventoryManagerMockRecorder) GetHostSSHKey(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostSSHKey", reflect.TypeOf((*MockInventoryManager)(nil).GetHostSSHKey), groupName, hostName)
}

// GetHostUsername mocks base method.
func (m *MockInventoryManager) GetHostUsername(groupName, hostName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHostUsername", groupName, hostName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHostUsername indicates an expected call of GetHostUsername.
func (mr *MockInventoryManagerMockRecorder) GetHostUsername(groupName, hostName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHostUsername", reflect.TypeOf((*MockInventoryManager)(nil).GetHostUsername), groupName, hostName)
}

// GetUngroupedHosts mocks base method.
func (m *MockInventoryManager) GetUngroupedHosts() []inventory.HostDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUngroupedHosts")
	ret0, _ := ret[0].([]inventory.HostDetail)
	return ret0
}

// GetUngroupedHosts indicates an expected call of GetUngroupedHosts.
func (mr *MockInventoryManagerMockRecorder) GetUngroupedHosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUngroupedHosts", reflect.TypeOf((*MockInventoryManager)(nil).GetUngroupedHosts))
}
