// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go
//
// Generated by this command:
//
//	mockgen -source=parser.go -destination=mocks/parser_mock.go -package=mocks InventoryParser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	inventory "github.com/jklaiber/jumper/pkg/inventory"
	gomock "go.uber.org/mock/gomock"
)

// MockInventoryParser is a mock of InventoryParser interface.
type MockInventoryParser struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryParserMockRecorder
}

// MockInventoryParserMockRecorder is the mock recorder for MockInventoryParser.
type MockInventoryParserMockRecorder struct {
	mock *MockInventoryParser
}

// NewMockInventoryParser creates a new mock instance.
func NewMockInventoryParser(ctrl *gomock.Controller) *MockInventoryParser {
	mock := &MockInventoryParser{ctrl: ctrl}
	mock.recorder = &MockInventoryParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryParser) EXPECT() *MockInventoryParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockInventoryParser) Parse(data []byte) (*inventory.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", data)
	ret0, _ := ret[0].(*inventory.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockInventoryParserMockRecorder) Parse(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockInventoryParser)(nil).Parse), data)
}
